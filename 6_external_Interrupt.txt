#include <xc.h>
#include <stdint.h>

#define _XTAL_FREQ 8000000    // Set the oscillator frequency

#define SWITCH_PIN PORTBbits.RB0
#define RELAY_PIN PORTBbits.RB1

void switchSetup() {
    TRISBbits.RB0 = 1;     // Set switch pin as input
    INTCON2bits.INTEDG0 = 0; // Interrupt on falling edge of RB0/INT0
    INTCONbits.INT0IF = 0; // Clear the INT0 interrupt flag
    INTCONbits.INT0IE = 1; // Enable the INT0 external interrupt
    INTCONbits.GIE = 1;    // Enable global interrupts
}

void relaySetup() {
    TRISBbits.RB1 = 0;     // Set relay pin as output
}

void relayOn() {
    RELAY_PIN = 1;        // Set relay pin high to turn on the relay
}

void relayOff() {
    RELAY_PIN = 0;        // Set relay pin low to turn off the relay
}

void __interrupt() ISR() {
    if (INTCONbits.INT0IF) {
        INTCONbits.INT0IF = 0; // Clear the INT0 interrupt flag

        if (SWITCH_PIN == 0) {
            relayOn();  // Turn on the relay when the switch is pressed
        } else {
            relayOff(); // Turn off the relay when the switch is released
        }
    }
}

void main() {
    switchSetup();
    relaySetup();

    while (1) {
        // Main program loop
    }
}





/*

Steps for Programming External Interrupt:
1. Set PORTB External interrupt pin as an input.
2. Also, make PORTB pins as digital input as it is multiplexed with ADC 
channels. This is done by disabling the ADON bit in the ADCON1 
register or by making the PBADEN configuration a bit low.
3. Configure INTCON2 register for edge trigger i.e. positive or negative 
edge.4. Enable external interrupt (INT0, INT1, INT2) by setting a respective 
interrupt to enable bit in the INTCON register.
5. Enable Global Interrupt (GIE).
6. When an interrupt occurs, it will jump to the ISR to serve to 
interrupt.
7. Finally, clear the Interrupt flag and continue.

Explain:-

1. The code includes two header files: `<xc.h>` and `<stdint.h>`. `<xc.h>` is specific to the XC8 compiler for PIC microcontrollers, while `<stdint.h>` provides definitions for standard integer types.

2. The code defines a constant `_XTAL_FREQ` and sets it to 8000000. This constant represents the oscillator frequency and is used for time calculations.

3. The code defines `SWITCH_PIN` and `RELAY_PIN` as `PORTBbits.RB0` and `PORTBbits.RB1`, respectively. These constants represent the specific pins connected to the switch and relay.

4. The code defines a function `switchSetup()` that configures the switch pin as an input. It sets `TRISBbits.RB0` to 1 to indicate that `RB0` is an input pin. Additionally, it configures the interrupt behavior for the switch by setting `INTCON2bits.INTEDG0` to 0, which triggers an interrupt on the falling edge of `RB0/INT0`. It also enables the INT0 external interrupt by setting `INTCONbits.INT0IE` to 1.

5. The code defines a function `relaySetup()` that configures the relay pin as an output. It sets `TRISBbits.RB1` to 0 to indicate that `RB1` is an output pin.

6. The code defines functions `relayOn()` and `relayOff()` to control the state of the relay. `relayOn()` sets `RELAY_PIN` to 1 to turn on the relay, while `relayOff()` sets `RELAY_PIN` to 0 to turn off the relay.

7. The code includes an interrupt service routine (ISR) labeled `__interrupt()`. This function is automatically called when an interrupt occurs. In this case, it handles the INT0 external interrupt.

8. Inside the ISR, the code checks if the INT0 interrupt flag (`INTCONbits.INT0IF`) is set. If it is, the code clears the interrupt flag and checks the state of the switch by reading `SWITCH_PIN`. If the switch is pressed (logic low, 0), it calls `relayOn()` to turn on the relay. If the switch is released (logic high, 1), it calls `relayOff()` to turn off the relay.

9. The `main()` function serves as the entry point of the program. It calls `switchSetup()` and `relaySetup()` functions to configure the switch and relay pins.

10. The program enters an infinite loop (`while (1)`) and continues to execute the code inside the loop indefinitely. This is typically the main program loop where you can add your custom logic.

Overall, this code sets up an external interrupt for a switch connected to `RB0` (INT0) on a PIC microcontroller. When the switch is pressed, the relay connected to `RB1` is turned on, and when the switch is released, the relay is turned off. The specific logic for your program should be added within the infinite loop in the `main()` function.


*/
