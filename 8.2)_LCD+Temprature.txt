#include <xc.h>
#include <stdio.h>

// LCD Pin Definitions
#define LCD_RS RB0
#define LCD_EN RB1
#define LCD_DATA PORTD

// Function Declarations
void LCD_Init();
void LCD_Command(unsigned char command);
void LCD_Data(unsigned char data);
void LCD_Print(const char *str);
void ADC_Init();
unsigned int ADC_Read();
void delay_ms(unsigned int ms);

int main(void) {
    unsigned int adc_value;
    float voltage, temperature;
    char temperature_str[10];

    // Initialize LCD and ADC
    LCD_Init();
    ADC_Init();

    while (1) {
        // Read ADC value
        adc_value = ADC_Read();

        // Convert ADC value to voltage
        voltage = (adc_value * 5.0) / 1023.0;

        // Calculate temperature using a formula specific to your temperature sensor
        // Replace the formula with the appropriate one for your sensor
        temperature = voltage * 100.0;

        // Convert temperature to string
        sprintf(temperature_str, "%.2f C", temperature);

        // Display temperature on LCD
        LCD_Command(0x80); // Move cursor to the beginning of the first line
        LCD_Print("Temperature:");
        LCD_Command(0xC0); // Move cursor to the beginning of the second line
        LCD_Print(temperature_str);

        delay_ms(1000); // Delay for 1 second
    }

    return 0;
}

// LCD initialization function
void LCD_Init() {
    LCD_Command(0x38); // 2 lines, 5x7 matrix
    LCD_Command(0x0C); // Display on, cursor off
    LCD_Command(0x06); // Increment cursor
    LCD_Command(0x01); // Clear display
    delay_ms(10);
}

// Function to send command to LCD
void LCD_Command(unsigned char command) {
    LCD_RS = 0; // RS = 0 for command
    LCD_DATA = command;
    LCD_EN = 1; // Enable pulse
    delay_ms(1);
    LCD_EN = 0;
    delay_ms(1);
}

// Function to send data to LCD
void LCD_Data(unsigned char data) {
    LCD_RS = 1; // RS = 1 for data
    LCD_DATA = data;
    LCD_EN = 1; // Enable pulse
    delay_ms(1);
    LCD_EN = 0;
    delay_ms(1);
}

// Function to print a string on LCD
void LCD_Print(const char *str) {
    while (*str != '\0') {
        LCD_Data(*str);
        str++;
    }
}

// ADC initialization function
void ADC_Init() {
    ADCON1 = 0x0F; // Set all pins as digital I/O
    ADCON2 = 0b10101010; // Right justified, Fosc/64 conversion clock, Vref+ = VDD, Vref- = VSS
    ADCON0 = 0x01; // Select channel 0 and turn on ADC module
}

// ADC reading function
unsigned int ADC_Read() {
    ADCON0bits.GO = 1; // Start ADC conversion
    while (ADCON0bits.GO); // Wait for conversion to complete
    return (ADRESH << 8) + ADRESL; // Return 10-bit ADC result
}

// Delay function in milliseconds
void delay_ms(unsigned int ms) {
    unsigned int i, j;
    for (i = 0; i < ms; i++) {
        for (j = 0; j < 1000; j++);
    }
}




/*

 Let's go through the provided code and explain its functionality point by point:

1. The code includes necessary header files, such as `<xc.h>` for the specific microcontroller being used and `<stdio.h>` for standard input/output operations.

2. LCD Pin Definitions: Defines the connections of LCD control pins and data port. In this code, the RS pin is defined as RB0, the EN pin is defined as RB1, and the data port is defined as PORTD.

3. Function Declarations: Declares the functions used in the code. These functions include LCD initialization, sending commands and data to the LCD, printing on the LCD, ADC initialization, ADC reading, and a delay function.

4. The `main` function: The main entry point of the program.

5. Inside the main function:
   - Local variable declarations: `adc_value` to store the ADC value, `voltage` to store the voltage calculated from the ADC value, `temperature` to store the calculated temperature, and `temperature_str` to store the temperature as a string.
   
   - LCD initialization: Calls the `LCD_Init` function to initialize the LCD.
   
   - ADC initialization: Calls the `ADC_Init` function to initialize the ADC module.
   
   - Infinite while loop: The program enters an infinite loop to continuously read the ADC, calculate the temperature, display it on the LCD, and introduce a delay.
   
   - Inside the loop:
     - Read ADC value: Calls the `ADC_Read` function to read the ADC value and stores it in `adc_value`.
     
     - Convert ADC value to voltage: Calculates the voltage using the ADC value and stores it in `voltage`.
     
     - Calculate temperature: Calculates the temperature using a specific formula and stores it in `temperature`.
     
     - Convert temperature to string: Uses the `sprintf` function to convert the temperature to a string and stores it in `temperature_str`.
     
     - Display temperature on LCD: Sends LCD commands and data to display the "Temperature:" message on the first line of the LCD using `LCD_Command` and `LCD_Print` functions. Then, displays the temperature string on the second line of the LCD.
     
     - Delay: Calls the `delay_ms` function to introduce a delay of 1 second.
   
6. LCD initialization function (`LCD_Init`): Sends the necessary commands to initialize the LCD. It sets the display mode, clears the display, and sets the entry mode.

7. Function to send command to LCD (`LCD_Command`): Sets RS to 0 (indicating a command), sends the command data to the LCD data port, and pulses the enable pin to latch the command.

8. Function to send data to LCD (`LCD_Data`): Sets RS to 1 (indicating data), sends the data to the LCD data port, and pulses the enable pin to latch the data.

9. Function to print a string on LCD (`LCD_Print`): Takes a string pointer as input and sends each character of the string to the LCD using `LCD_Data`.

10. ADC initialization function (`ADC_Init`): Configures the ADC module by setting the appropriate register values. It sets all the pins as digital I/O, configures the ADCON2 register for the desired ADC operation, and enables the ADC module by setting ADCON0 register.

11. ADC reading function (`ADC_Read`): Starts the ADC conversion by setting the GO bit, waits for the conversion to complete by checking the GO bit, and returns the 10-bit ADC result by combining ADRESH and ADRESL registers.

12. Delay function in milliseconds (`delay_ms`): Introduces a delay by using nested loops. The number of loops determines the delay duration.

That's the point


*/
