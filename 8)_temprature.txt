#include <pic18f4550.h>
#include <stdio.h>

#define LCD_EN LATAbits.LA1
#define LCD_RS LATAbits.LA0
#define LCDPORT LATB

unsigned char str[16];

void lcd_delay(unsigned int time)
{
 unsigned int i , j ;

    for(i = 0; i < time; i++)
    {
       for(j=0;j<100;j++);
    }
}


void SendInstruction(unsigned char command)
{
     LCD_RS = 0;		// RS low : Instruction
     LCDPORT = command;
     LCD_EN = 1;		// EN High
     lcd_delay(10);
     LCD_EN = 0;		// EN Low; command sampled at EN falling edge
     lcd_delay(10);
}

void SendData(unsigned char lcddata)
{
     LCD_RS = 1;		// RS HIGH : DATA
     LCDPORT = lcddata;
     LCD_EN = 1;		// EN High
     lcd_delay(10);
     LCD_EN = 0;		// EN Low; data sampled at EN falling edge
     lcd_delay(10);
}

void InitLCD(void)
{
    ADCON1 = 0x0F;
    TRISB = 0x00; //set data port as output
    TRISAbits.RA0 = 0; //RS pin
    TRISAbits.RA1 = 0; // EN pin

    SendInstruction(0x38);      //8 bit mode, 2 line,5x7 dots
    SendInstruction(0x06);	//entry mode
    SendInstruction(0x0C);	//Display ON cursor OFF
    SendInstruction(0x01);      //Clear display
    SendInstruction(0x80);      //set address to 0
}

void LCD_display(unsigned int row, unsigned int pos, unsigned char *ch)
{
    if(row==1)
        SendInstruction(0x80 | (pos-1));
    else
        SendInstruction(0xC0 | (pos-1));
    
    while(*ch)
        SendData(*ch++);
}

void ADCInit(void)
{
    TRISEbits.RE2 = 1;                  //ADC channel 7 input

    ADCON1 = 0b00000111;                //Ref voltages Vdd & Vss; AN0 - AN7 channels Analog
    ADCON2 = 0b10101110;                //Right justified; Acquisition time 4T; Conversion clock Fosc/64
}

unsigned short Read_Temp(void)
{
    ADCON0 = 0b00011101;      //ADC on; Select channel;
    GODONE = 1;              //Start Conversion

    while(GO_DONE == 1 );    //Wait till A/D conversion is complete
    return ADRES;                       //Return ADC result
}

int main(void) 
{
    unsigned int temp;
    InitLCD();
    ADCInit();
    LCD_display(1,1,"Temperature:");
    while(1)
    {
        temp = Read_Temp();
        temp = ((temp * 500) / 1023);
        sprintf(str,"%d'C  ",temp);
        LCD_display(2,1,str);
        lcd_delay(9000);
    }
    
       return 0;
}

    
    
    /*
    
    This code is an Embedded C program for temperature sensor interfacing using an ADC and displaying the temperature on an LCD. Let's go through the code and explain its functionality:

1. The code includes the necessary header files and defines the LCD control pins and LCD data port.

2. The `lcd_delay` function is a delay function used for creating time delays in the LCD communication process. It utilizes two nested loops for delay.

3. The `SendInstruction` function is used to send instructions to the LCD. It sets the RS pin to 0 (indicating an instruction), sets the data on the LCD port, toggles the EN pin to latch the command, and introduces a delay.

4. The `SendData` function is similar to `SendInstruction`, but it sends data to the LCD instead of instructions. It sets the RS pin to 1 (indicating data) and follows the same process as `SendInstruction`.

5. The `InitLCD` function initializes the LCD by configuring the necessary pins as outputs and sending the initialization sequence of instructions to the LCD. The initialization sequence includes setting the 8-bit mode, 2-line display, entry mode, display on with the cursor off, clearing the display, and setting the address to the beginning.

6. The `LCD_display` function is used to display characters on the LCD. It takes arguments for the row number, position, and a character pointer. It sets the address based on the row and position, and then sends the characters one by one using `SendData`.

7. The `ADCInit` function initializes the ADC module. It configures the necessary pins as inputs and sets the ADCON1 and ADCON2 registers for the desired ADC operation.

8. The `Read_Temp` function reads the temperature from the ADC. It sets the ADC channel, starts the conversion by setting the GODONE bit, and waits until the conversion is complete by checking the GO_DONE bit. It then returns the ADC result.

9. In the `main` function, the LCD is initialized, the ADC is initialized, and the "Temperature:" message is displayed on the first line of the LCD using `LCD_display`.

10. Inside the infinite `while(1)` loop, the temperature is read from the ADC using `Read_Temp`. The obtained ADC value is then converted to temperature using a formula specific to your temperature sensor. The calculated temperature is stored in the `temp` variable.

11. The temperature value is converted to a string using the `sprintf` function and stored in the `str` array.

12. The temperature string is then displayed on the second line of the LCD using `LCD_display`.

13. A delay of 9000 cycles is introduced using `lcd_delay`.

14. The loop continues indefinitely, continuously updating and displaying the temperature on the LCD.

That's the explanation of the given code. Make sure to connect the temperature sensor to the appropriate ADC channel and configure it correctly.



    return 0;
}
*/
